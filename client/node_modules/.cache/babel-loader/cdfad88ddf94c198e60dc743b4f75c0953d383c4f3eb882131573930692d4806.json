{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ecaranto\\\\Downloads\\\\gown-booking-system\\\\gown-booking-system\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\n// client/src/context/AuthContext.js\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode'; // Use named import based on the latest version\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    // Check if token exists in localStorage and set user state\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        const decodedUser = jwtDecode(token); // Use jwtDecode instead of jwt_decode\n        // Check if token is expired\n        if (decodedUser.exp * 1000 < Date.now()) {\n          logoutUser(); // Logout if token is expired\n        } else {\n          setUser(decodedUser); // Set decoded user data if token is valid\n        }\n      } catch (error) {\n        console.error('Failed to decode token:', error);\n        logoutUser(); // Clear token if there's a decoding error\n      }\n    }\n  }, []);\n  const loginUser = token => {\n    localStorage.setItem('token', token);\n    try {\n      const decodedUser = jwtDecode(token); // Use jwtDecode here as well\n      setUser(decodedUser); // Update user with decoded token data\n    } catch (error) {\n      console.error('Failed to decode token during login:', error);\n    }\n  };\n  const logoutUser = () => {\n    localStorage.removeItem('token');\n    setUser(null); // Clear user data on logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loginUser,\n      logoutUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jwtDecode","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","token","localStorage","getItem","decodedUser","exp","Date","now","logoutUser","error","console","loginUser","setItem","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ecaranto/Downloads/gown-booking-system/gown-booking-system/client/src/context/AuthContext.js"],"sourcesContent":["// client/src/context/AuthContext.js\r\nimport React, { createContext, useState, useEffect } from 'react';\r\nimport { jwtDecode } from 'jwt-decode'; // Use named import based on the latest version\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n\r\n    useEffect(() => {\r\n        // Check if token exists in localStorage and set user state\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            try {\r\n                const decodedUser = jwtDecode(token); // Use jwtDecode instead of jwt_decode\r\n                // Check if token is expired\r\n                if (decodedUser.exp * 1000 < Date.now()) {\r\n                    logoutUser(); // Logout if token is expired\r\n                } else {\r\n                    setUser(decodedUser); // Set decoded user data if token is valid\r\n                }\r\n            } catch (error) {\r\n                console.error('Failed to decode token:', error);\r\n                logoutUser(); // Clear token if there's a decoding error\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    const loginUser = (token) => {\r\n        localStorage.setItem('token', token);\r\n        try {\r\n            const decodedUser = jwtDecode(token); // Use jwtDecode here as well\r\n            setUser(decodedUser); // Update user with decoded token data\r\n        } catch (error) {\r\n            console.error('Failed to decode token during login:', error);\r\n        }\r\n    };\r\n\r\n    const logoutUser = () => {\r\n        localStorage.removeItem('token');\r\n        setUser(null); // Clear user data on logout\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ user, loginUser, logoutUser }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,SAASC,SAAS,QAAQ,YAAY,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExC,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMU,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACP,IAAI;QACA,MAAMG,WAAW,GAAGZ,SAAS,CAACS,KAAK,CAAC,CAAC,CAAC;QACtC;QACA,IAAIG,WAAW,CAACC,GAAG,GAAG,IAAI,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;UACrCC,UAAU,CAAC,CAAC,CAAC,CAAC;QAClB,CAAC,MAAM;UACHR,OAAO,CAACI,WAAW,CAAC,CAAC,CAAC;QAC1B;MACJ,CAAC,CAAC,OAAOK,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/CD,UAAU,CAAC,CAAC,CAAC,CAAC;MAClB;IACJ;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,SAAS,GAAIV,KAAK,IAAK;IACzBC,YAAY,CAACU,OAAO,CAAC,OAAO,EAAEX,KAAK,CAAC;IACpC,IAAI;MACA,MAAMG,WAAW,GAAGZ,SAAS,CAACS,KAAK,CAAC,CAAC,CAAC;MACtCD,OAAO,CAACI,WAAW,CAAC,CAAC,CAAC;IAC1B,CAAC,CAAC,OAAOK,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAChE;EACJ,CAAC;EAED,MAAMD,UAAU,GAAGA,CAAA,KAAM;IACrBN,YAAY,CAACW,UAAU,CAAC,OAAO,CAAC;IAChCb,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;EACnB,CAAC;EAED,oBACIN,OAAA,CAACC,WAAW,CAACmB,QAAQ;IAACC,KAAK,EAAE;MAAEhB,IAAI;MAAEY,SAAS;MAAEH;IAAW,CAAE;IAAAX,QAAA,EACxDA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAACrB,EAAA,CA1CWF,YAAY;AAAAwB,EAAA,GAAZxB,YAAY;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}