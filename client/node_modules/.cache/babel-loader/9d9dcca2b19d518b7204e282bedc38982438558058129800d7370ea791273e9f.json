{"ast":null,"code":"import axios from \"axios\";\n\n// Create an Axios instance with a base URL\nconst api = axios.create({\n  baseURL: \"http://localhost:5000/api\",\n  // Backend base URL\n  headers: {\n    \"Content-Type\": \"application/json\" // Default content type\n  }\n});\n\n// Add an interceptor to include the authorization token in every request\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\"); // Retrieve token from localStorage\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`; // Add Authorization header\n  }\n  return config;\n}, error => {\n  return Promise.reject(error); // Handle request errors\n});\n\n// Add an interceptor to handle responses globally\napi.interceptors.response.use(response => {\n  return response; // Pass through successful responses\n}, error => {\n  // Handle response errors globally (e.g., 401 Unauthorized)\n  if (error.response && error.response.status === 401) {\n    console.error(\"Unauthorized access - logging out...\");\n    localStorage.removeItem(\"token\"); // Clear token\n    window.location.href = \"/login\"; // Redirect to login\n  }\n  return Promise.reject(error); // Pass through other errors\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","console","removeItem","window","location","href"],"sources":["C:/Users/ecaranto/Downloads/gown-booking-system with admin/client/src/utils/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Create an Axios instance with a base URL\r\nconst api = axios.create({\r\n  baseURL: \"http://localhost:5000/api\", // Backend base URL\r\n  headers: {\r\n    \"Content-Type\": \"application/json\", // Default content type\r\n  },\r\n});\r\n\r\n// Add an interceptor to include the authorization token in every request\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem(\"token\"); // Retrieve token from localStorage\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`; // Add Authorization header\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error); // Handle request errors\r\n  }\r\n);\r\n\r\n// Add an interceptor to handle responses globally\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response; // Pass through successful responses\r\n  },\r\n  (error) => {\r\n    // Handle response errors globally (e.g., 401 Unauthorized)\r\n    if (error.response && error.response.status === 401) {\r\n      console.error(\"Unauthorized access - logging out...\");\r\n      localStorage.removeItem(\"token\"); // Clear token\r\n      window.location.href = \"/login\"; // Redirect to login\r\n    }\r\n    return Promise.reject(error); // Pass through other errors\r\n  }\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,2BAA2B;EAAE;EACtCC,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB,CAAE;EACtC;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EAC7C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE,CAAC,CAAC;EACpD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAAC,CAAC;AAChC,CACF,CAAC;;AAED;AACAZ,GAAG,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAK;EACZ,OAAOA,QAAQ,CAAC,CAAC;AACnB,CAAC,EACAH,KAAK,IAAK;EACT;EACA,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACnDC,OAAO,CAACL,KAAK,CAAC,sCAAsC,CAAC;IACrDH,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;IAClCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ,CAAC,CAAC;EACnC;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAAC,CAAC;AAChC,CACF,CAAC;AAED,eAAeZ,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}